<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.nemo.kr.mapper.ilgaja.write.CompanyMapper">
  	<select id="getCompanyTotalCnt" parameterType="CompanyDTO" resultType="int">
    	/* 회사정보 조회 company.getCompanyTotalCnt */
    	SELECT 
    		COUNT(1)
    	FROM 
    		company
    	WHERE 
    		1 = 1
    		${where}
    		<if test="start_reg_date neq '' and start_reg_date neq null"> 
    			AND DATE_FORMAT(reg_date, '%Y-%m-%d') <![CDATA[ >= ]]> #{start_reg_date} 
    		</if>
    		<if test="end_reg_date neq '' and end_reg_date neq null"> 
    			AND DATE_FORMAT(reg_date, '%Y-%m-%d') <![CDATA[ <= ]]> #{end_reg_date} 
    		</if>
		    <if test="srh_use_yn neq '' and srh_use_yn neq null"> 
		    	AND use_yn = #{srh_use_yn} 
		    </if>
  	</select>

  	<select id="getCompanyList" parameterType="CompanyDTO" resultType="CompanyDTO">
    	/* 회사정보 조회 company.getCompanyList */
    	SELECT 
			company_seq
	  		, company_type
	  		, company_num
	  		, company_name
	  		, business_name
	  		, FN_DECRYPT(company_owner) as company_owner
	  		, company_business
	  		, company_sector
	  		, company_license_num
	  		, FN_DECRYPT(company_account) as company_account
	  		, company_bank_name
	  		, FN_DECRYPT(company_bank_account) as company_bank_account
	  		, FN_DECRYPT(company_bank_account_holder) as company_bank_account_holder
	  		, FN_DECRYPT(company_tel) as company_tel
	  		, auto_company_use_yn
	  		, auto_worker_use_yn
	  		, company_fax
	  		, FN_DECRYPT(company_phone) as company_phone
	  		, FN_DECRYPT(company_email) as  company_email
	  		, FN_DECRYPT(ars_phone) as ars_phone 
	  		, ars_phone_push_token
	  		, minimum_reserves
	  		, system_fee
	  		, running_royalty
	  		, work_fee_rate
	  		, worker_fee_rate
	  		, company_addr
	  		, company_feature
	  		, company_memo
	  		, company_license_scan_yn
	  		, company_corp_scan_yn
	  		, company_bank_scan_yn
	  		, company_etc_scan_yn
	  		, company_sign_scan_yn
	  		, share_yn
	  		, company_status
	  		, use_yn
	  		, recommendation
	  		, company_order
	  		, reg_date
	  		, reg_admin
	  		, mod_date
	  		, mod_admin 
	  		, worker_fee_rate
	  		, work_fee_rate
    	FROM 
    		company
    	WHERE 
    		1 = 1
    		${where}
    		<if test="start_reg_date neq '' and start_reg_date neq null"> 
    			AND DATE_FORMAT(reg_date, '%Y-%m-%d') <![CDATA[ >= ]]> #{start_reg_date} 
    		</if>
    		<if test="end_reg_date neq '' and end_reg_date neq null"> 
    			AND DATE_FORMAT(reg_date, '%Y-%m-%d') <![CDATA[ <= ]]> #{end_reg_date} </if>
		    <if test="srh_use_yn neq '' and srh_use_yn neq null"> 
		    	AND use_yn = #{srh_use_yn} 
		    </if>
    	ORDER BY company_order, ${sidx} ${sord}
    	<if test="paging != null">
      		<choose>
        		<when test="paging.pageNo gt 0">
    				LIMIT ${paging.startPage}, ${paging.endPage}
        		</when>
        		<otherwise>
    				LIMIT 0, ${paging.endPage}
        		</otherwise>
      		</choose>
    	</if>
  	</select>
  
  	<select id="getCompanyInfo" parameterType="CompanyDTO" resultType="CompanyDTO">
    	/* 회사정보 조회 company.getCompanyInfo */
	    SELECT 
    		company_seq
	  		, company_type
	  		, company_num
	  		, company_name
	  		, business_name
	  		, company_business
	  		, company_sector
	  		, company_license_num
	  		, FN_DECRYPT(company_owner) as company_owner
	  		, FN_DECRYPT(company_account) as company_account
	  		, company_bank_name
	  		, FN_DECRYPT(company_bank_account) as company_bank_account
	  		, FN_DECRYPT(company_bank_account_holder) as company_bank_account_holder
	  		, FN_DECRYPT(company_tel) as company_tel
	  		, auto_company_use_yn
	  		, auto_worker_use_yn
	  		, company_fax
	  		, FN_DECRYPT(company_phone) as company_phone
	  		, FN_DECRYPT(company_email) as  company_email
	  		, FN_DECRYPT(ars_phone) as ars_phone 
	  		, ars_phone_push_token
	  		, minimum_reserves
	  		, system_fee
	  		, running_royalty
	  		, work_fee_rate
	  		, worker_fee_rate
	  		, company_addr
	  		, company_feature
	  		, company_memo
	  		, company_license_scan_yn
	  		, company_corp_scan_yn
	  		, company_bank_scan_yn
	  		, company_etc_scan_yn
	  		, company_sign_scan_yn
	  		, share_yn
	  		, company_status
	  		, use_yn
	  		, company_order
	  		, reg_date
	  		, reg_admin
	  		, mod_date
	  		, mod_admin 
    	FROM 
    		company
    	WHERE 
    		1 = 1
    	  	<if test="use_yn neq '' and use_yn neq null">				
    	  		AND use_yn = #{use_yn} 
    	  	</if>
			<choose>
				<when test="ars_phone neq '' and ars_phone neq null">
					AND ars_phone = #{ars_phone}
				</when>
				<otherwise>
					AND company_seq = #{company_seq}
				</otherwise>
			</choose>
  	</select>
  
    <insert id="setCompanyCell" parameterType="CompanyDTO" useGeneratedKeys="true" keyProperty="company_seq">
    	/* 회사정보 생성 company.setCompanyCell */
    	INSERT INTO company ( 
    		reg_date
    		, reg_admin
    		, mod_admin 
    	) VALUES ( 
    		NOW()
    		, #{reg_admin}
    		, #{reg_admin} 
    	)
  	</insert>

  	<update id="setCompanyInfo" parameterType="CompanyDTO">
    	/* 회사정보 수정 company.setCompanyInfo */
    	UPDATE 
    		company 
    	SET
      		company_seq = #{company_seq}
      		<if test="company_num neq null"> 
      			, company_num = #{company_num } </if>
      		<if test="company_name neq null"> 
      			, company_name = #{company_name }
      		</if>
      		<if test="company_owner neq null"> 
      			, company_owner = FN_ENCRYPT(#{company_owner}) 
      		</if>
      		<if test="company_business neq null"> 
      			, company_business = #{company_business} 
      		</if>
      		<if test="company_sector neq null"> 
      			, company_sector = #{company_sector } 
      		</if>
      		<if test="company_license_num neq null"> 
      			, company_license_num = #{company_license_num } 
      		</if>
      		<if test="company_account neq null"> 
      			, company_account = FN_ENCRYPT(#{company_account}) 
      		</if>
      		<if test="company_bank_name neq null"> 
      			, company_bank_name = #{company_bank_name } 
      		</if>
      		<if test="company_bank_account neq null"> 
      			, company_bank_account = FN_ENCRYPT(#{company_bank_account}) 
      		</if>
      		<if test="company_bank_account_holder neq null"> 
      			, company_bank_account_holder = FN_ENCRYPT(#{company_bank_account_holder}) 
      		</if>
      		<if test="company_tel neq null"> 
      			, company_tel = FN_ENCRYPT(#{company_tel}) 
      		</if>
      		<if test="auto_company_use_yn neq null">
      			, auto_company_use_yn = #{auto_company_use_yn }
      		</if>
      		<if test="auto_worker_use_yn neq null">
      			, auto_worker_use_yn = #{auto_worker_use_yn }
      		</if>
      		<if test="company_fax neq null"> 
      			, company_fax = #{company_fax } 
      		</if>
      		<if test="company_phone neq null"> 
      			, company_phone = FN_ENCRYPT(#{company_phone}) 
      		</if>
      		<if test="company_email neq null"> 
      			, company_email = FN_ENCRYPT(#{company_email}) 
      		</if>
      		<if test="company_addr neq null"> 
      			, company_addr = #{company_addr } 
      		</if>
      		<if test="company_feature neq null"> 
      			, company_feature = #{company_feature } 
      		</if>
      		<if test="company_memo neq null"> 
      			, company_memo = #{company_memo } 
      		</if>
      		<if test="company_license_scan_yn neq null"> 
      			, company_license_scan_yn = #{company_license_scan_yn } 
      		</if>
      		<if test="company_corp_scan_yn neq null"> 
      			, company_corp_scan_yn = #{company_corp_scan_yn } 
      		</if>
      		<if test="company_bank_scan_yn neq null"> 
      			, company_bank_scan_yn = #{company_bank_scan_yn } 
      		</if>
      		<if test="company_etc_scan_yn neq null"> 
      			, company_etc_scan_yn = #{company_etc_scan_yn } 
      		</if>
      		<if test="company_sign_scan_yn neq null">
      			, company_sign_scan_yn = #{company_sign_scan_yn }
      		</if>
      		<if test="recommendation neq null"> 
      			, recommendation = FN_ENCRYPT(#{recommendation }) 
      		</if>
      		<if test="use_yn neq '' and use_yn neq null"> 
      			, use_yn = #{use_yn } 
      		</if>
      		<if test="share_yn neq '' and share_yn neq null"> 
      			, share_yn = #{share_yn } 
      		</if>
      		<if test="reg_admin neq '' and reg_admin neq null"> 
      			, mod_admin = #{reg_admin } 
      		</if>
      		<if test="work_fee_rate neq null">
      			, work_fee_rate = #{work_fee_rate }
      		</if>
      		<if test="worker_fee_rate neq null">
      			, worker_fee_rate = #{worker_fee_rate }
      		</if>
      		<if test="ars_phone neq null and ars_phone neq ''">
      			, ars_phone = FN_ENCRYPT(#{ars_phone })
      		</if>
      		<if test="business_name neq null">
      			, business_name = #{business_name }
      		</if>
      		<if test="system_fee neq null and system_fee neq ''">
      			, system_fee = #{system_fee }
      		</if>
      		<if test="running_royalty neq null and running_royalty neq ''">
      			, running_royalty = #{running_royalty }
      		</if>
      		<if test="company_status neq null and company_status neq ''">
      			, company_status = #{company_status }
      		</if>
      		<if test="minimum_reserves neq null and minimum_reserves neq ''">
      			, minimum_reserves = #{minimum_reserves }
      		</if>
    	WHERE 
    		company_seq = #{company_seq}
  	</update>

<!--
  <delete id="removeCompanyInfo" parameterType="CompanyDTO">
    /* 회사정보 삭제 company.removeCompanyInfo */
    DELETE FROM company
    WHERE company_seq = #{company_seq}
  </delete>
-->
  	<update id="removeCompanyInfo" parameterType="CompanyDTO">
    	/* 회사정보 삭제 company.removeCompanyInfo */
    	UPDATE 
    		company 
    	SET
      		use_yn = 0
      		<if test="reg_admin neq '' and reg_admin neq null"> 
      			, mod_admin = #{reg_admin} 
      		</if> 
    	WHERE 
    		company_seq IN
    		<foreach collection="sel_company_seq" item="sel_seq"  open="(" close=")" separator=", ">
      			#{sel_seq}
    		</foreach>
  	</update>
</mapper>
